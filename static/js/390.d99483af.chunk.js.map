{"version":3,"file":"static/js/390.d99483af.chunk.js","mappings":"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","sources":["../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/send/send.js","pages/contact.js"],"sourcesContent":["export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import React, { useState } from \"react\";\r\nimport emailjs from \"emailjs-com\"; // Make sure to import emailjs\r\n\r\nimport \"./contact.css\";\r\n\r\nconst Contact = () => {\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n\r\n  // Email validation regex\r\n  const validateEmail = (email) => {\r\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validate email\r\n    if (!validateEmail(email)) {\r\n      setEmailError(\"Please enter a valid email address.\");\r\n      return;\r\n    }\r\n    setEmailError(\"\"); // Clear any previous error\r\n\r\n    // Prepare emailJS data\r\n    const templateParams = {\r\n      from_name: name,\r\n      from_email: email,\r\n      message: message,\r\n    };\r\n\r\n    // Send email using EmailJS\r\n    try {\r\n      const response = await emailjs.send(\r\n        \"service_mvcfiyi\",      // Replace with your service ID\r\n        \"template_sf6zwsg\",     // Replace with your template ID\r\n        templateParams,         // Data to send in the email\r\n        \"LEoYzPGNQYaYi-3Ma\"          // Replace with your user ID\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        setSubmitted(true);\r\n      } else {\r\n        throw new Error(\"Email sending failed.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending email:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"heading-container\">\r\n      <div className=\"heading-heading\">\r\n        <h1>CONTACT ME</h1>\r\n      </div>\r\n\r\n      {!submitted ? (\r\n        <div className=\"card-container\">\r\n          <div className=\"card card-large\"></div>\r\n          <div className=\"card card-small\">\r\n            <form className=\"contact-form\" onSubmit={handleSubmit}>\r\n              <h2 className=\"form-title\">Any Questions ?</h2>\r\n\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter your name\"\r\n                  required\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"input-group\">\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n                {emailError && <div className=\"error\">{emailError}</div>}\r\n              </div>\r\n\r\n              <div className=\"input-group\">\r\n                <textarea\r\n                  placeholder=\"Enter your message\"\r\n                  required\r\n                  value={message}\r\n                  onChange={(e) => setMessage(e.target.value)}\r\n                ></textarea>\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"submit-button\">\r\n                SUBMIT <span className=\"arrow\"> &gt; </span>\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"success-message\">Successfully submitted!</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","status","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","target","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","templatePrams","uID","_userID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","Contact","submitted","setSubmitted","useState","email","setEmail","name","setName","message","setMessage","emailError","setEmailError","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","test","validateEmail","templateParams","from_name","from_email","emailjs","Error","error","console","type","placeholder","required","value","onChange"],"sourceRoot":""}